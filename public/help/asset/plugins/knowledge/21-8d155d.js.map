{"version":3,"file":"21-8d155d.js","mappings":"8LAIc,SAAUA,EAAV,GAA8D,IAA3C,SAAEC,GAAyC,EACxE,MAAMC,GAAKC,EAAAA,EAAAA,kBAqDX,OAnDAC,EAAAA,EAAAA,YAAU,KAEN,MAAMC,EAAuE,IAAe,IAAd,OAAEC,GAAY,EACxFA,EAAOC,OAAOC,WAAa,IACpBF,EAAOC,OAAOC,WACjBC,UAAW,CACPC,MAAO,OACPC,KAAM,WAIdL,EAAOM,SAAW,IACXN,EAAOM,SACVH,UAAW,CACP,UAAW,yCACX,aAAc,CACVI,OAAQ,YACRC,YAAa,WACbC,eAAeC,GACX,MAAMC,GAAUC,EAAAA,EAAAA,MAChB,GAAIF,EAAOG,MAAO,CAGd,aAFoBF,EAAQG,SAASJ,EAAOG,QAE/BE,KAAKC,IACP,CACHC,MAAOD,EAAKE,QACZC,MAAOH,EAAKI,SAIxB,GAAIV,EAAOO,MAAO,CACd,MAAMD,QAAaL,EAAQU,QAAQX,EAAOO,OAC1C,GAAID,EACA,MAAO,CACH,CACIC,MAAOD,EAAKE,QACZC,MAAOH,EAAKI,aAWhDxB,EAAG0B,iBAAiB,mBAAoBvB,GACxCH,EAAG0B,iBAAiB,mBAAoBvB,KACzC,IAEIJ","sources":["webpack://TopWritePlugins.knowledge/./src/components/editor/activate.tsx"],"sourcesContent":["import { GetComponentProps, useEventTarget } from 'topwrite';\r\nimport { useEffect } from 'react';\r\nimport { useSubBook } from '@/lib/sub-book';\r\n\r\nexport default function Activate({ children }: GetComponentProps<'activate'>) {\r\n    const et = useEventTarget();\r\n\r\n    useEffect(() => {\r\n\r\n        const listener: TypeEventListener<'beforeCreatePart' | 'beforeUpdatePart'> = ({ detail }) => {\r\n            detail.schema.properties = {\r\n                ...detail.schema.properties,\r\n                reference: {\r\n                    title: '关联文档',\r\n                    type: 'string',\r\n                }\r\n            };\r\n\r\n            detail.uiSchema = {\r\n                ...detail.uiSchema,\r\n                reference: {\r\n                    'ui:help': '关联文档后该分组下的章节替换为被关联文档的所有章节，只能关联已发布的公开文档',\r\n                    'ui:options': {\r\n                        widget: 'typeahead',\r\n                        placeholder: '输入文档名称搜索',\r\n                        async onSearch(params: { query?: string, value?: string }) {\r\n                            const subBook = useSubBook();\r\n                            if (params.query) {\r\n                                const books = await subBook.getBooks(params.query);\r\n\r\n                                return books.map((book) => {\r\n                                    return {\r\n                                        value: book.hash_id,\r\n                                        label: book.name\r\n                                    };\r\n                                });\r\n                            }\r\n                            if (params.value) {\r\n                                const book = await subBook.getBook(params.value);\r\n                                if (book) {\r\n                                    return [\r\n                                        {\r\n                                            value: book.hash_id,\r\n                                            label: book.name\r\n                                        }\r\n                                    ];\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n        };\r\n\r\n        et.addEventListener('beforeCreatePart', listener);\r\n        et.addEventListener('beforeUpdatePart', listener);\r\n    }, []);\r\n\r\n    return children;\r\n}\r\n"],"names":["Activate","children","et","useEventTarget","useEffect","listener","detail","schema","properties","reference","title","type","uiSchema","widget","placeholder","async","params","subBook","useSubBook","query","getBooks","map","book","value","hash_id","label","name","getBook","addEventListener"],"sourceRoot":""}